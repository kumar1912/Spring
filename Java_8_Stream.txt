https://stackoverflow.com/questions/41448826/if-elseif-else-like-functionality-with-java-8-streams
https://stackoverflow.com/users/2711488/holger
https://stackoverflow.com/questions/28032827/java-8-lambdas-function-identity-or-t-t/28041480#28041480


package j8.streams.basics;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import j8.domain.Trade;
import j8.util.TradeUtil;

// Streams Basics PART 2
public class StreamsBasics {
	// Collecting big trades using Streams
	private void findLargeTradesUsingStreams(List<Trade> trades) {
		
		List<Trade> largeTrades = trades.parallelStream()
			.filter(trade ->trade.getQuantity() > 10000)
			.filter(Trade::isCancelledTrade)
			.limit(10)
			.collect(Collectors.toList());
		
		System.out.println("Large trades: "+largeTrades);
	}

	private List<Trade> findLargeTradesUsingPreJava8(List<Trade> trades) {
		List<Trade> largeTrades = new ArrayList<Trade>();
		// Logic for collecting the large trades

		for (Trade trade : trades) {
			if (trade.getQuantity() > 10000
					&& trade.getStatus().equals("CANCELLED")
					&& trade.getInstrument().equals("GOOGL"))
				largeTrades.add(trade);
		}
		return largeTrades;
	}

	public static void main(String[] args) {
		StreamsBasics basics = new StreamsBasics();
		List<Trade> trades = TradeUtil.createTrades();
		basics.findLargeTradesUsingPreJava8(trades);
		basics.findLargeTradesUsingStreams(trades);
		
	}

}


-----------------------------------------------------------------------------------

package java8_Stream.interview;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamTest {
	public static void main(String[] args) {

		Student student1 = new Student(
				"Kumar",
				20,
				new Address("1234"),
				Arrays.asList(new MobileNumber("1233"), new MobileNumber("1234")));

		Student student2 = new Student(
				"Tejish",
				20,
				new Address("1235"),
				Arrays.asList(new MobileNumber("1111"), new MobileNumber("3333"), new MobileNumber("1233")));

		Student student3 = new Student(
				"Clary",
				20,
				new Address("1236"),
				Arrays.asList(new MobileNumber("3333"), new MobileNumber("4444")));

		List<Student> students = Arrays.asList(student1, student2, student3);

		/*****************************************************
         1. Get student with exact match name "Kumar"
		 *****************************************************/
		Optional<Student> stud = students.stream()
				.filter(student -> student.getName().equals("Kumar"))
				.findFirst();
		System.out.println("1. Get student with exact match name \"Kumar\"");
		System.out.println(stud.isPresent() ? stud.get().getName() : "No student found");
		System.out.println("--------------------");

		/*****************************************************
         2. Get student with matching address "1235"
		 *****************************************************/
		Optional<Student> stud1 = students.stream()
				.filter(student -> student.getAddress().getZipcode().equals("1235"))
				.findFirst();
		System.out.println("2. Get student with matching address \"1235\"");
		System.out.println(stud1.isPresent() ? stud1.get().getName() : "No student found");
		System.out.println("--------------------");

		/*****************************************************
         3. Get all student having mobile numbers 3333.
		 *****************************************************/
		List<Student> stud2 = students.stream()
				.filter(student111 -> student111.getMobileNumbers().stream().anyMatch(x -> Objects.equals(x.getNumber(), "3333")))
				.collect(Collectors.toList());

		String result1 = stud2.stream().map(std -> std.getName()).collect(Collectors.joining(",", "[", "]"));
		System.out.println("3. Get all student having mobile numbers 3333.");
		System.out.println(result1);
		System.out.println("--------------------");

		/*****************************************************
         4. Get all student having mobile number 1233 and 1234
		 *****************************************************/
		List<Student> stud3 = students.stream()
				.filter(student -> student.getMobileNumbers().stream().allMatch(x -> Objects.equals(x.getNumber(), "1233") || Objects.equals(x.getNumber(), "1234")))
				.collect(Collectors.toList());

		String result4 = stud3.stream().map(std -> std.getName()).collect(Collectors.joining(",", "[", "]"));
		System.out.println("4. Get all student having mobile number 1233 and 1234.");
		System.out.println(result4);
		System.out.println("--------------------");

		/*****************************************************
         5. Create a List<Student> from the List<TempStudent>
		 *****************************************************/
		TempStudent tmpStud1 = new TempStudent(
				"Kumar1",
				201,
				new Address("12341"),
				Arrays.asList(new MobileNumber("12331"), new MobileNumber("12341")));

		TempStudent tmpStud2 = new TempStudent(
				"Tejish1",
				202,
				new Address("12351"),
				Arrays.asList(new MobileNumber("11111"), new MobileNumber("33331"), new MobileNumber("12331")));

		List<TempStudent> tmpStudents = Arrays.asList(tmpStud1, tmpStud2);

		List<Student> studentList = tmpStudents.stream()
				.map(tmpStud -> new Student(tmpStud.name, tmpStud.age, tmpStud.address, tmpStud.mobileNumbers))
				.collect(Collectors.toList());
		System.out.println(" 5. Create a List<Student> from the List<TempStudent>");
		System.out.println(studentList);
		System.out.println("--------------------");

		/*****************************************************
         6. Convert List<Student> to List<String> of student name
		 *****************************************************/
		List<String> studentsName = studentList.stream()
				.map(Student::getName)
				.collect(Collectors.toList());
		System.out.println("6. Convert List<Student> to List<String> of student name.");
		System.out.println(studentsName.stream().collect(Collectors.joining(",")));
		System.out.println(studentsName.stream().collect(Collectors.joining(",", "[", "]")));
		System.out.println("--------------------");

		/*****************************************************
         7. Convert List<students> to String
		 *****************************************************/
		String name = students.stream()
				.map(Student::getName)
				.collect(Collectors.joining(",", "[", "]"));
		System.out.println("7. Convert List<students> to String");
		System.out.println(name);
		System.out.println("--------------------");

		/*****************************************************
         8. Change the case of List<String>
		 *****************************************************/
		List<String> nameList =
				Arrays.asList("Kumar", "Dany", "Tejish", "Hello", "Mango");
		System.out.println(" 8. Change the case of List<String>");
		nameList.stream()
		.map(String::toUpperCase)
		.forEach(System.out::println);
		System.out.println("--------------------");

		/*****************************************************
         9. Sort List<String>
		 *****************************************************/
		List<String> namesList =
				Arrays.asList("Kumar", "Dany", "Tejish", "Hello", "Mango");
		System.out.println("9. Sort List<String>");
		namesList.stream()
		.sorted()
		.forEach(System.out::println);
		System.out.println("--------------------");

		/*****************************************************
         10. Conditionally apply Filter condition, say if flag is enabled then
		 *****************************************************/
		boolean sortConditionFlag = true;

		Stream<Student> conditionalFilterResult = students.stream()
				.filter(std -> std.getName().startsWith("J"));

		if(sortConditionFlag){
			conditionalFilterResult = conditionalFilterResult.sorted(Comparator.comparing(Student::getName));
		}

		System.out.println("10. Conditionally apply Filter condition, say if flag is enabled then.");
		System.out.println("Before sorting :");
		students.forEach(s -> System.out.println(s.getName()));

		List<Student> list = conditionalFilterResult.collect(Collectors.toList());
		System.out.println("After filter and conditional sorting :");
		list.forEach(s -> System.out.println(s.getName()));

	}
}

----------------------------------------------------------------------------------------------------------------



private void findLargeTradesUsingStreams(List<Trade> trades) {

		trades.parallelStream()
		.filter(trade -> trade.getQuantity() > 10000)
		.filter(Trade::isCancelledTrade)
		.limit(10)
		.distinct()
		.forEach(System.out::println);
		
	}
	
	
--------------------------------------------------------------------------

public class Utility 
{
	 /** Log field. */
	private static Logger log = Logger.getLogger(Utility.class.toString());
	
	/**
	 * Method to Check if the String object is null
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkNull(String strValue) 
	{
		if (strValue == null || strValue.equals("null") || strValue == "null")
			{return "";}
		else
			{return strValue.trim();}
	}
	
	/**
	 * Method to Check if the String object is null
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkNullInteger(String strValue) 
	{
		if (strValue == null || strValue.equals("null") || strValue == "null"|| strValue.equalsIgnoreCase("select"))
			{return "";}
		else
			{return strValue.trim();}
	}

	/**
	 * Method to Check if the String object is null
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkNull(Object strValue) 
	{
		if (strValue == null || strValue.toString().equals("null")|| strValue.toString() == "null")
			{return "";}
		else
			{return strValue.toString().trim();}
	}

	/**
	 * Method to get double value of a string
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static Double getEquiDouble(String strValue) 
	{
		if (strValue.equals(""))
			{return 0.0;}
		else
			{return Double.parseDouble(strValue);}
	}

	/**
	 * Method to Check for zero value
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkZero(Object strValue) 
	{
		if (strValue.toString().equals("0") || strValue == null|| strValue.equals(null))
			{return "";}
		else
			{return strValue.toString().trim();}
	}

	/**
	 * Gets the Value from the object for the method name
	 * 
	 * @param obj
	 *            Object
	 * @param methodName
	 *            String
	 * @return Object
	 */
	@SuppressWarnings("unchecked")
	public static Object getMethodValueNoParams(Object obj, String methodName) 
	{
		Class c = obj.getClass();
		Object ret = new Object();
		try {
			Method method = c.getMethod(methodName, new Class[0]);
			ret = method.invoke(obj, new Object[0]);
		} catch (InvocationTargetException ex) {
			log.error(ex);
			ret = null;
		} catch (NoSuchMethodException ne) {
			if(!methodName.contains("Title"))
			log.error(ne);
			ret = null;
		} catch (IllegalAccessException ia) {
			log.error(ia);
			ret = null;
		}

		return ret;
	}
	/**
	 * Gets the Method object for the method name
	 * 
	 * @param obj
	 *            Object
	 * @param lineFeed
	 *            String
	 * @return Method
	 */
	@SuppressWarnings("unchecked")
	public static Method getMethodNames(Object obj, String lineFeed) 
	{
		//log.info("Utility : getMethodNames ");
		Class c = obj.getClass();
		Method[] method = c.getMethods();
		Method m = null;
		int size = method.length;
		for (int i = 0; i < size; i++) {
			String name = method[i].getName();
			if (name.equals(lineFeed)) {
				m = method[i];
				break;
			}
		}
		return m;
	}

	/**
	 * This will return date in sent format
	 * 
	 * @param date
	 * @param strFormat
	 * @return String
	 */
	public static String getFormatedDate(Date date, String strFormat) 
	{
		DateFormat dateFormat = new SimpleDateFormat(strFormat);
		return dateFormat.format(date);
	}

	/**
	 * Replace a Given String target is the original string from is the string to be replaced to is the string which will used to replace
	 * 
	 * @param String
	 *            target
	 * @param String
	 *            from
	 * @param String
	 *            to
	 * @return String
	 */
	public static String replaceString(String target, String from, String to) 
	{
		int start = target.indexOf(from);
		if (start == -1)
			{return target;}
		int lf = from.length();
		char[] targetChars = target.toCharArray();
		StringBuffer buffer = new StringBuffer();
		int copyFrom = 0;
		while (start != -1) {
			buffer.append(targetChars, copyFrom, start - copyFrom);
			buffer.append(to);
			copyFrom = start + lf;
			start = target.indexOf(from, copyFrom);
		}
		buffer.append(targetChars, copyFrom, targetChars.length - copyFrom);
		return buffer.toString();
	}

	/**
	 * Method to Check if the String object is null and If not will sufix and
	 * prefix with % and return This can be used for all search with "like"
	 * operator in select query
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String search(String strValue) 
	{
		if (strValue == null || strValue.trim().equals("")|| strValue.equals("null") || strValue == "null")
			{return "";}
		else
			{return "%" + strValue.trim() + "%";}
	}
/** Common Method will be written here.



-----------------------------------------------------


package file;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class ReadFileLineByLineUsingFiles {

	public static void main(String[] args) {
		try {
			List<String> allLines = Files.readAllLines(Paths.get("H:\\TUI_Sonata\\My_Personal\\R_D_Task\\R_D_Java\\UdemyLines_ReadFileLineByLineUsingFiles.txt"));
			for (String line : allLines) {

				
				  if (!line.equals("") && !line.contains("min")) { System.out.println(line); }
				 

				/*if (!line.equals("") && !line.contains("min") ) {	
					char ch = line.charAt(0);
					if(!Character.isDigit(ch)) {
						System.out.println(line);
					}
				}*/
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}






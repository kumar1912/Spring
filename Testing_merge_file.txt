007 Restful-booker
https://restful-booker.herokuapp.com/apidoc/index.html

009 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L08/restassured-for-beginners

010 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L09/restassured-for-beginners

011 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L10/restassured-for-beginners

011 JsonPath
https://www.javadoc.io/doc/io.rest-assured/json-path/3.0.0/io/restassured/path/json/JsonPath.html

012 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L11/restassured-for-beginners

012 JSON-In-Java-Maven-dependency
https://mvnrepository.com/artifact/org.json/json

013 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L12/restassured-for-beginners

014 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L13/restassured-for-beginners

015 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L14/restassured-for-beginners

016 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L15/restassured-for-beginners


017 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L16/restassured-for-beginners

018 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L17/restassured-for-beginners

019 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L18/restassured-for-beginners

020 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L19/restassured-for-beginners

021 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L20/restassured-for-beginners

022 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L21/restassured-for-beginners

022 Jackson-Databind-Maven-dependency
https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind

023 Code-for-this-lecture-on-github
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/tree/master/L22/restassured-for-beginners


https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-seven-pagination/
https://github.com/pkainulainen/spring-data-jpa-examples

F:\Utorrent\BDD Junit\REST Assured. API test automation for beginners\[TutsNode.com] - REST Assured. API test automation for beginners
https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners

https://www.javacodegeeks.com/2012/01/rest-pagination-in-spring.html
https://gist.github.com/eugenp/1622997		PaginationDiscoverabilityListener.java


https://github.com/vijjayy81/spring-boot-jpa-rest-demo-filter-paging-sorting    *** Project Required PAgination  (vijjayy)             sample taken , example filter query param
             

https://reflectoring.io/spring-boot-paging/
https://github.com/thombergs/code-examples/blob/master/spring-boot/paging/src/test/java/io/reflectoring/paging/PagedControllerTest.java  PagedControllerTest.java

https://www.baeldung.com/rest-api-pagination-in-spring
https://github.com/eugenp/tutorials/blob/master/spring-boot-rest/src/main/java/com/baeldung/springpagination/controller/PostRestController.java          ******


https://bezkoder.com/spring-boot-pagination-filter-jpa-pageable/


https://github.com/dimashyshkin/REST-Assured.-API-test-automation-for-beginners/blob/master/L17/restassured-for-beginners/src/test/java/com/herokuapp/restfulbooker/GetBookingTests.java

https://github.com/eugenp/tutorials/blob/master/spring-web-modules/spring-rest-angular/src/test/java/com/baeldung/web/service/StudentServiceIntegrationTest.java         sample taken
https://www.baeldung.com/rest-api-pagination-in-spring
https://github.com/eugenp/tutorials/blob/master/spring-boot-rest/src/test/java/com/baeldung/web/FooPageableLiveTest.java    sample taken    
https://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application  			 int page, int size, String sortDir, String sort) {   



https://hellokoding.com/mapping-jpa-hibernate-entity-and-dto-with-mapstruct/             Mapstruct


	@GetMapping("/custom/pageable")
	public ResponseBase retrieveCustomer(@Param(value = "page") int page, 
												@Param(value = "size") int size){
//		Pageable requestedPage = PageRequest.of(page, size, );
		Pageable requestedPage = PageRequest.of(page, size, Sort.by(Direction.ASC, "firstname"));
		Page<Customer> customers  = customerRepository.findAll(requestedPage);
		ResponseBase res = new ResponseBase(customers.getContent(), customers.getTotalPages(),
										customers.getNumber(), customers.getSize(),customers.getTotalElements(),
										customers.isFirst(),customers.isLast());
		
		return res;
	}
  
  
  import java.util.List;

public class ResponseBase {
	private List<Customer> customers;
	private int totalPages;
	private int pageNumber;
	private int pageSize;
	private long totalElements;
	
	private boolean isFirst;
	private boolean isLast;
	
	public ResponseBase() {
		super();
		// TODO Auto-generated constructor stub
	}

	public ResponseBase(List<Customer> customers, int totalPages, int pageNumber, int pageSize, long totalElements,
			boolean isFirst, boolean isLast) {
		super();
		this.customers = customers;
		this.totalPages = totalPages;
		this.pageNumber = pageNumber;
		this.pageSize = pageSize;
		this.totalElements = totalElements;
		this.isFirst = isFirst;
		this.isLast = isLast;
	}
  
		<!-- https://mvnrepository.com/artifact/io.rest-assured/json-path -->
<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>json-path</artifactId>
    <version>4.1.2</version>
</dependency>

<!-- https://mvnrepository.com/artifact/io.rest-assured/xml-path -->
<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>xml-path</artifactId>
    <version>4.1.2</version>
</dependency>
		<!-- https://mvnrepository.com/artifact/org.testng/testng -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>7.1.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>4.1.2</version>
			<scope>test</scope>
		</dependency>

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.hasItems;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertFalse;

import java.util.List;

import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.response.Response;
import com.loizenai.springboot.pagingansorting.model.ResponseBase;

//@SpringBootTest
//@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
class SpringBootPagingAndSortingApplicationTests {

	@Value("${local.server.port}")
	private int port;
	
	/*
	
	@Test
	void retrieveCustomerTest() {
		/*
		  given().log().all().
		  when().get("/api/customers/custom/pageable?page=0&size=5").
		  then().log().all(). statusCode(200);
		 
		System.out.println("Hi");
		// Salary < 150000, pageSize 5
		Response response = (Response) RestAssured
				.given().
				//port(port).
					when().get("/api/customers/custom/pageable?page=0&size=5").
					then().statusCode(200);

		Assert.assertEquals(200, response.getStatusCode());
		ResponseBase responseObj = response.getBody().as(ResponseBase.class);
		Assert.assertNotNull(responseObj);
		Assert.assertNotNull(responseObj.getCustomers());
		Assert.assertNotNull(responseObj.getPageNumber());
		Assert.assertEquals(5, responseObj.getCustomers().size());
//		Assert.assertTrue(responseObj.getData().stream().allMatch(data -> data.getSalary() < 150000));
	}

*/



	    @Test
	    public void givenRequestForStudents_whenPageIsOne_expectContainsNames() {
			/*
			 * given().params("page", "0", "size", "2").get(String.format(ENDPOINT,
			 * port)).then().assertThat() .body("content.name", hasItems("Bryan", "Ben"));
			 */
	        given()
//	        .params("page", "0", "size", "2")
	        .get("/api/customers/custom/pageable?page=0&size=5")
	        .then().assertThat()
	          .body("content.firstname", hasItems("Bryan", "Ardys"));
	    }

	    @Test
	    public void givenRequestForStudents_whenSizeIsTwo_expectTwoItems() {
//	    	given().params("page", "0", "size", "2").get(String.format(ENDPOINT, port)).then().assertThat().body("size", equalTo(2));
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=0&size=5")
	        .then().assertThat().body("size", equalTo(5));
	    }

	    @Test
	    public void givenRequestForStudents_whenSizeIsTwo_expectNumberOfElementsTwo() {
//	    	given().params("page", "0", "size", "2").get(String.format(ENDPOINT, port)).then().assertThat().body("numberOfElements", equalTo(2));
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=0&size=5")
//	        .then().assertThat().body("numberOfElements", equalTo(2));
		        .then().assertThat().body("pageSize", equalTo(5));
	    	 
	    }

	    @Test
	    public void givenResourcesExist_whenFirstPageIsRetrieved_thenPageContainsResources1() {   
	        final Response response = RestAssured.get("/api/customers/custom/pageable?page=0&size=5");
	        assertFalse(response.body().as(List.class).isEmpty());
	    }
	    
	    @Test
	    public void givenRequestForStudents_whenResourcesAreRetrievedPaged_thenExpect200() {
	    //	given().params("page", "0", "size", "2").get(String.format(ENDPOINT, port)).then().statusCode(200);
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=0&size=5")
	        .then().statusCode(200);
	    }

	    @Test
	    public void givenRequestForStudents_whenPageOfResourcesAreRetrievedOutOfBounds_thenExpect500() {
	    	// given().params("page", "1000", "size", "2").get(String.format(ENDPOINT, port)).then().statusCode(500);
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=1000&size=5")
	        .then().statusCode(200);
	    }

	    @Test
	    public void givenRequestForStudents_whenPageNotValid_thenExpect500() {
//	        given().params("page", RandomStringUtils.randomNumeric(5), "size", "2").get(String.format(ENDPOINT, port))
	        given()
//	        .params("page", "0", "size", "2")
	        .get("/api/customers/custom/pageable?page=RandomStringUtils.randomNumeric(5)&size=5")
	        .then().statusCode(200);
	    }

	    @Test
	    public void givenRequestForStudents_whenPageSizeIsFive_expectFiveItems() {
//	        given().params("page", "0", "size", "5").get(String.format(ENDPOINT, port)).then().body("content.size()", is(5));
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=0&size=5")
	        .then().body("content.size()", is(1));
	    }

	    @Test
	    public void givenResourcesExist_whenFirstPageIsRetrieved_thenPageContainsResources() {
//	        given().params("page", "0", "size", "2").get(String.format(ENDPOINT, port)).then().assertThat().body("first", equalTo(true));
	    	 given()
//		        .params("page", "0", "size", "2")
		        .get("/api/customers/custom/pageable?page=0&size=5")
	        .then().assertThat().body("isFirst", equalTo(true));
	    }
}




Sreedhar Gmail
https://www.udemy.com/course/spring-boot-microservices-with-spring-cloud-beginner-to-guru/learn/lecture/20194068?src=sac&kw=spring#overview
		https://stackoverflow.com/questions/55448188/spring-boot-pagination-mockito-repository-findallpageable-returns-null/55448614

https://springframework.guru/testing-spring-boot-restful-services/
https://www.javatips.net/api/org.springframework.data.domain.pageable

https://www.amitph.com/about/
https://www.amitph.com/spring-rest-service-exception-handling/
https://www.amitph.com/testing-spring-data-jdbc/
https://github.com/amitrp/spring-data-jdbc-examples/blob/master/src/test/java/com/amitph/spring/tutorials/springdatajdbc/repo/StudentRepositoryTest.java

import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.guru.model.Blog;
import org.springframework.stereotype.Repository;

@Repository
public interface BlogRepository extends PagingAndSortingRepository<Blog,Long> {
}


Plural Sight
Securing Spring Data REST APIs
Microservices: The Big Picture
Java Microservices with Spring Cloud: Developing Services

Spring Framework: Documenting Spring Data Rest APIs with Swagger and Springfox


https://techshard.wpcomstaging.com/2019/04/28/automating-code-with-mapstruct/
https://github.com/swathisprasad/springboot-mapstruct-example/blob/master/src/main/java/com/swathisprasad/mapstruct/service/LibraryService.java

D:\Mphasis_Project_Kick_Off_DOC
https://github.com/mokszr/mapstruct-tutorial


https://github.com/swathisprasad/springboot-mapstruct-example


https://www.stacksimplify.com/course-presentations/springboot-masterclass.pdf       ******************************************************
https://github.com/stacksimplify/springboot-buildingblocks

java: Internal error in the mapping processor: java.lang.NullPointerException  	at org.mapstruct.ap.internal.processor.DefaultVersionInformation.createManifestUrl(DefaultVersionInformation.java:182)  	
at org.mapstruct.ap.internal.processor.DefaultVersionInformation.openManifest(DefaultVersionInformation.java:153)  	
at org.mapstruct.ap.internal.processor.DefaultVersionInformation.getLibra

https://stackoverflow.com/questions/65112406/intellij-idea-mapstruct-java-internal-error-in-the-mapping-processor-java-lang

https://github.com/eugenp/tutorials/blob/master/core-java-modules/core-java-collections-list-3/src/main/java/com/baeldung/java/list/CopyListService.java
https://www.baeldung.com/java-streams-find-list-items

https://stackabuse.com/guide-to-mapstruct-in-java-advanced-mapping-library  


___________________________________________________________________________________________________________________________________________
SPLUNK

https://medium.com/@daki_98651/kafka-and-splunk-3e47d971784c
https://www.thedatadifference.net/2019/02/13/how-to-get-data-from-a-apache-kafka-topic-into-splunk-in-minutes/
https://github.com/mebinjoe/spring-boot-kafka-splunk
https://www.splunk.com/en_us/blog/tips-and-tricks/splunk-connect-for-kafka-connecting-apache-kafka-with-splunk.html


https://www.youtube.com/watch?v=oLoPpKq3JgU                *************************TestCase with example *
https://github.com/splunk/splunk-sdk-java/blob/master/splunk/src/test/java/com/splunk/EntityTest.java

https://www.youtube.com/watch?v=5Mgni6AYnWg               ******************zStreaming with Spring Cloud Stream and Apache Kafka
https://github.com/olegz/spring-integration-samples

https://github.com/splunk/splunk-library-javalogging/blob/main/src/main/java/com/splunk/logging/HttpEventCollectorErrorHandler.java
https://github.com/splunk/splunk-library-javalogging/blob/main/src/main/java/com/splunk/logging/hec/MetadataTags.java



https://panlw.github.io/15282782041132.html      ***********************************

https://www.caeliusconsulting.com/blogs/mulesoft-splunk-integration/

https://mindmajix.com/splunk-logging                      ********************************Splunk Logging ***************


file:///H:/Kumar_Important_Books/allitebooks/Advanced%20Microservices.pdf

RETURNING Clause

Listing 5-11. INSERT with RETURNING Clause
INSERT INTO employee (username, team_id, joined_date)
VALUES ('bob', 2, '2010-05-01') RETURNING *;
id | username | team_id | joined_date
---+----------+---------+-------------
4 | bob | 2 | 2010-05-01


Listing 5-10. Joining Data from Multiple Tables
SELECT employee.*, team.team_name FROM employee
LEFT JOIN team ON employee.team_id = team.id;
id | username | team_id | join_date | team_name
---+----------+---------+-------------+----------------
1 | tlhunter | 1 | 1986-04-01 | Penguin Tamers
2 | steve | 2 | 1989-11-05 | Lion Tamers



file:///H:/Kumar_Important_Books/allitebooks/Microservice/Spring%20Microservices%20in%20Action.pdf

A.2 Downloading the projects from GitHub

All the source code for the book is in my GitHub repository (http://github.com/carnellj). Each chapter in the book has its own source code repository. Here’s a listing of
all the GitHub repositories used in the book:
 Chapter 1 (Welcome to the cloud, Spring)—http://github.com/carnellj/
spmia-chapter1
 Chapter 2 (Introduction to microservices)—http://github.com/carnellj/spmiachapter2
 Chapter 3 (Spring Cloud Config)—http://github.com/carnellj/spmiachapter3 and http://github.com/carnellj/config-repo
 Chapter 4 (Spring Cloud/Eureka)—http://github.com/carnellj/spmiachapter4
 Chapter 5 (Spring Cloud/Hystrix)—http://github.com/carnellj/spmiachapter5
 Chapter 6 (Spring Cloud/Zuul)—http://github.com/carnellj/spmia-chapter6
 Chapter 7 (Spring Cloud/Oauth2)—http://github.com/carnellj/spmiachapter7
 Chapter 8 (Spring Cloud Stream)—http://github.com/carnellj/spmia-chapter8
 Chapter 9 (Spring Cloud Sleuth)—http://github.com/carnellj/spmia-chapter9
 Chapter 10 (Deployment)—http://github.com/carnellj/spmia-chapter10 and
http://github.com/carnellj/chapter-10-platform-tests

3.4.3 Encrypting and decrypting a property

GitHub repository is using encryption on the config server         **********************

NOTE If you try to run the licensing service downloaded from the GitHub
repository (https://github.com/carnellj/spmia-chapter3) from your desktop
using the previous Java command, it will fail because you don’t have a desktop
Postgres server running and the source code in the GitHub repository is using
encryption on the config server. We’ll cover using encryption later in the
chapter. The previous example demonstrates how to override Spring properties via the command line.


Logging : 9.1.2 Anatomy of a Spring Cloud Sleuth trace
https://github.com/carnellj/spmia-chapter8/blob/master/licensing-service/src/main/java/com/thoughtmechanix/licenses/utils/UserContext.java



Splunk
https://www.youtube.com/watch?v=rRtmAgOfIcM

https://github.com/mebinjoe/spring-boot-kafka-splunk ***************************************

https://github.com/mebinjoe/spring-boot-kafka-splunk/blob/master/src/main/java/app/controller/ApacheKafkaController.java
return "Message sent to the Kafka Topic sample_topic_to_send Successfully";

https://github.com/mebinjoe/spring-boot-kafka-splunk/blob/master/src/main/java/app/service/SplunkService.java
https://github.com/mebinjoe/spring-boot-kafka-splunk/blob/master/pom.xml
 <repositories>
        <repository>
            <id>splunk-artifactory</id>
            <name>Splunk Releases</name>
            <url>http://splunk.jfrog.io/splunk/ext-releases-local</url>
        </repository>
    </repositories>

	
	https://medium.com/@daki_98651/kafka-and-splunk-3e47d971784c
	
-----------------------------------------------------------------------------------------------------------------------------------------------------

Implementing Spring Cloud Gateway Logging Filter
Step 24 - Exploring Centralized Logging and Monitoring in GKE
Enable Logging and Tracing APIs in Google Cloud Platform


Examples
https://www.youtube.com/watch?v=oLoPpKq3JgU
	https://github.com/splunk/splunk-sdk-java.git
		https://github.com/splunk/splunk-sdk-java/tree/master/splunk/src/main/java/com/splunk

https://www.youtube.com/watch?v=v0lHZDMfBOE           *****************		
		https://github.com/ramashanker/training/tree/master/spring-boot-splunk
		https://github.com/ramashanker/training
		

Mastering Distributed Tracing
https://www.packtpub.com/product/mastering-distributed-tracing/9781788628464
		https://github.com/packtpublishing/mastering-distributed-tracing
		https://github.com/PacktPublishing/Mastering-Distributed-Tracing/blob/master/Chapter05/exercise1/storage-service/src/main/java/storage/App.java
			Span span = kafka.startConsumerSpan("process", headers);
        try (Scope scope = tracer.scopeManager().activate(span, true)) 

		
https://www.packtpub.com/product/microservices-with-spring-boot-and-spring-cloud-second-edition/9781801072977		
https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-2E/blob/main/Chapter10/util/src/main/java/se/magnus/util/http/GlobalControllerExceptionHandler.java

  private HttpErrorInfo createHttpErrorInfo(
    HttpStatus httpStatus, ServerHttpRequest request, Exception ex) {

    final String path = request.getPath().pathWithinApplication().value();
    final String message = ex.getMessage();

    LOG.debug("Returning HTTP status: {} for path: {}, message: {}", httpStatus, path, message);
    return new HttpErrorInfo(httpStatus, path, message);
	
https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-2E/blob/main/Chapter10/util/src/main/java/se/magnus/util/http/ServiceUtil.java

  private String findMyHostname() {
    try {
      return InetAddress.getLocalHost().getHostName();
    } catch (UnknownHostException e) {
      return "unknown host name";
    }
  }
  
  
 https://github.com/PacktPublishing/Mastering-Distributed-Tracing/blob/master/Chapter05/exercise1/chat-api/src/main/java/chat/ChatController.java
 
 
 
 https://www.splunk.com/en_us/blog/devops/what-is-distributed-tracing-and-why-you-need-it.html
 
 Take a look at the breakdown below. 
Client sends a customer name request to Server at time: X (Trace Context: customerrequest1, SpanID: 1, timestamp: X)
Server receives customer name request from Client at time: Y (Trace Context: customerrequest1, SpanID: 2, timestamp: Y)
Server parses the request from the Client at time: Z (Trace Context: customerrequest1, SpanID: 3, timestamp: Z)


‪D:\Splunk\IT2095.pdf
D:\Splunk\IT1339.pdf


https://app.pluralsight.com/library/courses/installing-configuring-splunk/table-of-contents

		https://www.splunk.com
		https://docs.splunk.com/Documentation
					Core Products  --> Splunk Enterprise
					https://docs.splunk.com/Documentation/Splunk
					https://docs.splunk.com/Documentation/Splunk/7.2.5/Overview/AboutSplunkEnterprise
					
		https://answer.splunk.com/index.html
		
		
		Download
			https://www.splunk.com/en_us/download/splunk-enterprise.html
			
			
			
			email 	: kumardodda19@gmail.com
			username : kumar191282
			Password : Dodda@12345
			
			Admin
			Admin@123
			
			
http://localhost:8080/
		Splunk Apps
				Browse More Apps 
						Search for "isilon" Plugin and Click on install.


-------------------------------------------------------------------------------------------------------------------
						
https://codingnconcepts.com/spring-boot/custom-api-request-response-logging/						
	https://github.com/ashishlahoti/springboot-api/tree/master/src/main/java/com/example/api/client
	
https://tanzu.vmware.com/developer/guides/request-response-logging/

https://frandorado.github.io/spring/2018/11/15/log-request-response-with-body-spring.html
		https://github.com/frandorado/spring-projects/tree/master/log-request-response-with-body/src/main/java/com/frandorado/loggingrequestresponsewithbody/interceptor
		
https://itzone.com.vn/en/article/displays-log-of-request-and-response-in-spring-boot/

https://jkoder.com/spring-boot-rest-api-log-incoming-http-requests-and-responses/

-----------------------------------------------------------------------------------------------------------------



Splunk Hands-on - The Complete Data Analytics using Splunk
	Splunk is a revolutionary analytical tool. The training will include the following:-
	Course introduction
	Setting up a Splunk enterprise environment
	Building a basic production environment
	Splunk inputs
	Parsing and searching
	Splunk resource management
	Implementing knowledge objects
	Creating lookups
	Creating field Aliases and calculated Fields
	Creating field extractions
	Creating tags and event types
	Creating workflow actions
	Creating alerts and scheduled reports
	Creating macros
	Creating data models
	
	
Splunk: Zero to Power User
Splunk 2021 - Beginner to Architect
		22. Security Use-Case - Finding Attack Vectors
			source="secure.log" action-"Success"/"failure" src="194.874.23"
			
				stats -  source="secure.log" action-"Success"/"failure" | stats count by src
				
				Find how many failed logins from every IPs
					source="secure.log" action-"Success"/"failure" | stats count by src
					source="secure.log" action-"Success"/"failure" | iplocation src
					
					
					create a visualization of countries in world - geostats
					
				Stats, eventstats, and streamstats
					https://docs.splunk.com/Documentation/SCS/current/SearchReference/StatsCommandExamples
					https://docs.splunk.com/Documentation/Splunk/8.2.3/SearchReference/Stats 
					https://www.tutorialspoint.com/splunk/splunk_stats_command.htm
					https://examples.javacodegeeks.com/splunk-stats-command-example/	       ************

					https://www.devopsschool.com/tutorial/splunk/commands/stats.html          ************
					Difference between stats and eval commands
The stats command calculates statistics based on fields in your events. The eval command creates new fields in your events by using existing fields and an arbitrary expression.



Splunk search processing language (SPL) support for BOOLEAN operators : AND, OR and NOT.


Example : 
source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats count(action), dc(action) as distinct_action

source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats count by action

source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats sum(TOTAL_TRANSACTION) by year ,month

source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats sum(TOTAL_TRANSACTION) by action


source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats min(TOTAL_TRANSACTION) by action

source="notification-stats.csv" host="mary" sourcetype="csv" 
|  stats min(TOTAL_TRANSACTION), max(TOTAL_TRANSACTION), avg(TOTAL_TRANSACTION) by action



Year	Month	ACTION	AVG_IN_SECONDS	MIN_IN_SECONDS	MAX_IN_SECONDS	TOTAL_TRANSACTION
2021	1	Deactivation	12.523	3	27	44
2021	1	Cancel	61.422	2	7083	391
2021	1	Complete	51.4	2	11080	6672
2021	1	Initial	68.869	5	7164	4152
2021	1	Modified	96.398	3	7023	543
2021	1	Removal	91.379	5	2141	58
2021	1	Rescheduled	86.858	4	7307	543
2021	1	Status	30.239	0	191727	43574
2021	1	Starting	68.708	1	36215	3699
2021	1	Update	262.103	8	1062	29
2021	2	Deactivation	13.132	2	31	38
2021	2	Cancel	155.067	2	37815	434
2021	2	Complete	47.752	2	10894	6494


Boolean Expressions

failed root AND admin   or failed root admin
failed root OR admin
failed NOT (root OR admin) 

Thu Oct 18 2018 00:15:06 mailsv1 sshd[3252]: Failed password for invalid user admin from 212.58.253.71 port 4027 ssh2
Thu Oct 18 2018 00:15:06 mailsv1 sshd[3904]: Failed password for invalid user admin from 198.228.212.52 port 2647 ssh2

Thu Oct 18 2018 00:15:06 mailsv1 sudo: djohnson ;  TTY=pts/0 ; PWD=/home/djohnson ; USER=root ; COMMAND=/bin/su
Thu Oct 18 2018 00:15:06 mailsv1 sshd[5602]: Failed password for root from 88.12.32.208 port 1607 ssh2
Thu Oct 18 2018 00:15:06 mailsv1 sshd[2583]: Failed password for root from 124.160.192.241 port 4859 ssh2



25. Splunk Reports

source="secure.log" action-"Success"/"failure" | iplocation src | table src country



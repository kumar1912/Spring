https://reflectoring.io/spring-data-specifications/ - *************  Specifications are inspired by the Domain-Driven Design “Specification” pattern
https://medium.com/fleetx-engineering/searching-and-filtering-spring-data-jpa-specification-way-e22bc055229a
https://www.logicbig.com/tutorials/spring-framework/spring-data/specifications.html
https://www.appsdeveloperblog.com/specification-predicate-advance-search-and-filtering-in-jpa/  **************
https://www.netsurfingzone.com/jpa/jpa-criteriabuilder-example/
https://www.programcreek.com/java-api-examples/?class=javax.persistence.criteria.CriteriaBuilder&method=like
https://www.tabnine.com/code/java/methods/javax.persistence.criteria.CriteriaQuery/getRestriction
https://kreepcode.com/spring-data-specification/ ***************************************************** All Example


https://www.callicoder.com/hibernate-spring-boot-jpa-one-to-many-mapping-example/
https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/
https://hellokoding.com/mapping-jpa-hibernate-entity-and-dto-with-mapstruct/
https://hellokoding.com/jpa-and-hibernate-one-to-many-unidirectional-spring-boot/

https://medium.com/@a.adendrata/converting-dto-and-entity-c24cba9cef4  -- Time examples

https://github.com/VictoriaAmazonka/stackabuse_dto/blob/master/src/main/java/com/stackabuse/dtoexample/controller/MapController.java
https://stackabuse.com/data-transfer-object-pattern-in-java-implementation-and-mapping
https://www.youtube.com/watch?v=N3uAMuC-bxo  DTO to Entity Video good Example
https://stackabuse.com/guide-to-mapstruct-in-java-advanced-mapping-library               *************
			https://github.com/TaimoorChoudhary/mapstruct
				https://github.com/VictoriaAmazonka/stackabuse_dto
https://www.programmersought.com/article/20453502320/
https://www.amitph.com/spring-entity-to-dto/         -- Junit test Case
------------------------------------------------------------------------------------------------------------------------------------------------------


https://thorben-janssen.com/how-to-join-unrelated-entities/
https://medium.com/@techkarmo/spring-data-jpa-join-with-unrelated-entities-with-help-of-jpql-in-spring-boot-application-c358e11512bd
https://www.programmersought.com/article/7600921460/
https://www.codeproject.com/Questions/5255697/Right-approach-for-aggregating-data-from-multiple
https://roytuts.com/spring-boot-data-jpa-left-right-inner-and-cross-join-examples/

Merge Example
https://onlyfullstack.blogspot.com/2019/02/setting-up-sonar-server-locally.html
https://onlyfullstack.blogspot.com/2019/02/integrate-jacoco-plugin-with-sonar-and-maven.html  next....
https://www.onlyfullstack.com/advance-collectors-in-java-8/ ****************

https://javaconceptoftheday.com/solving-real-time-queries-using-java-8-features-employee-management-system/  ********
https://javaconceptoftheday.com/collections-and-streams-in-java/

https://asbnotebook.com/spring-data-jpa-crud-example/
https://github.com/asbnotebook/spring-boot
https://asbnotebook.com/jpa-many-to-many-example-spring-boot/
https://roytuts.com/spring-boot-data-jpa-left-right-inner-and-cross-join-examples/



   @GetMapping("/user/all")
    public List<UserDTO> getUsers() {
    	List<User> user =  userRepository.findAll();
    	List<UserDTO> userDto = new ArrayList();
    	for (User userq : user) {

    		UserDTO userDTO = new UserDTO();
    		userDTO.setEmail(userq.getEmail());
    		userDTO.setFirstName(userq.getFirstName());
    		userDTO.setLastName(userq.getLastName());
    		userDTO.setMobile(userq.getMobile());
    		userDTO.setRoles(userq.getRoles().stream().map(a -> a.getPermission()).collect(Collectors.joining(",", "", "")));

    		//    		String addressID = userq.getRoles().stream().map(a -> a.getPermission()).collect(Collectors.joining(",", "[", "]")));
    		userDto.add(userDTO);

    	}


    	/*
    	 * List<UserDTO> newList = user.stream() .map(f -> new UserDTO(f.getUserId(),
    	 * f.getFirstName() , f.getLastName(), f.getMobile(), f.getEmail(),
    	 * 
    	 * f.getRoles().stream() .map(a -> a.permission)
    	 * .collect(Collectors.joining(","))) .collect(Collectors.toList();
    	 */
    	return userDto;

    	/*If you wanna create new list, use Stream.map method:
https://stackoverflow.com/questions/38496455/modify-property-value-of-the-objects-in-list-using-java-8-streams/38497684
    		List<Fruit> newList = fruits.stream()
    		    .map(f -> new Fruit(f.getId(), f.getName() + "s", f.getCountry()))
    		    .collect(Collectors.toList())*/
    }
    
    
    import java.util.Random;

public class JavaMainTest {
public static void main(String[] args) {
	/*
	 * int leftLimit = 97; // letter 'a' int rightLimit = 122; // letter 'z' int
	 * targetStringLength = 8; Random random = new Random();
	 * 
	 * String generatedString = random.ints(leftLimit, rightLimit + 1)
	 * .limit(targetStringLength) .collect(StringBuilder::new,
	 * StringBuilder::appendCodePoint, StringBuilder::append) .toString();
	 * 
	 * System.out.println("generatedString  : " + generatedString);
	 */
    
    
    int leftLimit = 48; // numeral '0'
    int rightLimit = 122; // letter 'z'
    int targetStringLength = 8;
    Random random = new Random();

    String generatedString = random.ints(leftLimit, rightLimit + 1)
      .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))
      .limit(targetStringLength)
      .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
      .toString();

    System.out.println(generatedString);
}
}


_____________________________________________________________________________________________________________________________________________

https://reflectoring.io/spring-data-specifications/ - *************  Specifications are inspired by the Domain-Driven Design “Specification” pattern
https://medium.com/fleetx-engineering/searching-and-filtering-spring-data-jpa-specification-way-e22bc055229a
https://www.logicbig.com/tutorials/spring-framework/spring-data/specifications.html
https://www.appsdeveloperblog.com/specification-predicate-advance-search-and-filtering-in-jpa/  **************
https://www.netsurfingzone.com/jpa/jpa-criteriabuilder-example/
https://www.programcreek.com/java-api-examples/?class=javax.persistence.criteria.CriteriaBuilder&method=like
https://www.tabnine.com/code/java/methods/javax.persistence.criteria.CriteriaQuery/getRestriction
https://kreepcode.com/spring-data-specification/ ***************************************************** All Example



# Dynamic Queries with Spring Data JPA Specifications

For step-by-step instructions, please check out [blog post](https://attacomsian.com/blog/spring-data-jpa-specifications).


package com.attacomsian.jpa;

import com.attacomsian.jpa.domains.Movie;
import com.attacomsian.jpa.repositories.MovieRepository;
import com.attacomsian.jpa.repositories.specs.MovieSpecification;
import com.attacomsian.jpa.repositories.specs.SearchCriteria;
import com.attacomsian.jpa.repositories.specs.SearchOperation;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;


import java.util.Arrays;
import java.util.List;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner specificationsDemo(MovieRepository movieRepository) {
        return args -> {

            // create new movies
            movieRepository.saveAll(Arrays.asList(
                    new Movie("Troy", "Drama", 7.2, 196, 2004,"2021-07-27T07:07:32"),
                    new Movie("The Godfather", "Crime", 9.2, 178, 1972,"2020-07-27T07:07:32"),
                    new Movie("Invictus", "Sport", 7.3, 135, 2009,"2019-07-27T07:07:32"),
                    new Movie("Black Panther", "Action", 7.3, 135, 2018,"2018-07-27T07:07:32"),
                    new Movie("Joker", "Drama", 8.9, 122, 2018,"2017-07-27T07:07:32"),
                    new Movie("Iron Man", "Action", 8.9, 126, 2008,"2016-07-27T07:07:32"),

            new Movie("Troy", "Drama1", 7.2, 196, 2004,"2021-07-27T07:07:32"),
                    new Movie("The Godfather1", "Crime", 9.2, 178, 1972,"2021-07-27T07:08:32"),
                    new Movie("Invictus1", "Sport", 7.3, 135, 2009,"2021-07-27T07:09:32"),
                    new Movie("Black Panther1", "Action", 7.3, 135, 2018,"2021-07-27T07:10:32"),
                    new Movie("Joker1", "Drama", 8.9, 122, 2018,"2021-07-27T07:11:32"),
                    new Movie("Iron Man1", "Action", 8.9, 126, 2008,"2021-07-27T07:12:32")
            ));

            /*// search movies by `genre`
            MovieSpecification msGenre = new MovieSpecification();
            msGenre.add(new SearchCriteria("genre", "Action", SearchOperation.EQUAL));
            List<Movie> msGenreList = movieRepository.findAll(msGenre);
            msGenreList.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");
            // search movies by `title` and `rating` > 7
            MovieSpecification msTitleRating = new MovieSpecification();
            msTitleRating.add(new SearchCriteria("title", "black", SearchOperation.MATCH));
            msTitleRating.add(new SearchCriteria("rating", 7, SearchOperation.GREATER_THAN));
            List<Movie> msTitleRatingList = movieRepository.findAll(msTitleRating);
            msTitleRatingList.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");
            // search movies by release year < 2010 and rating > 8
            MovieSpecification msYearRating = new MovieSpecification();
            msYearRating.add(new SearchCriteria("releaseYear", 2010, SearchOperation.LESS_THAN));
            msYearRating.add(new SearchCriteria("rating", 8, SearchOperation.GREATER_THAN));
            List<Movie> msYearRatingList = movieRepository.findAll(msYearRating);
            msYearRatingList.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");
            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msWatchTime = new MovieSpecification();
            msWatchTime.add(new SearchCriteria("watchTime", 150, SearchOperation.GREATER_THAN_EQUAL));
            List<Movie> msWatchTimeList = movieRepository.findAll(msWatchTime, Sort.by("title"));
            msWatchTimeList.forEach(System.out::println);*/

          /*  System.out.println("______________________________________________________________________________");
            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime = new MovieSpecification();
            msDateTime.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.GREATER_THAN_EQUAL));
            List<Movie> msDateTimeList = movieRepository.findAll(msDateTime);
            msDateTimeList.forEach(System.out::println);

            System.out.println("______________________________________________________________________________");
            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime1 = new MovieSpecification();
            msDateTime1.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.LESS_THAN_EQUAL));
             movieRepository.findAll(msDateTime1).forEach(System.out::println);
            System.out.println("______________________________________________________________________________");

            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime2 = new MovieSpecification();
            msDateTime2.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.GREATER_THAN));
            movieRepository.findAll(msDateTime2).forEach(System.out::println);
            System.out.println("______________________________________________________________________________");

            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime3 = new MovieSpecification();
            msDateTime3.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.LESS_THAN));
            movieRepository.findAll(msDateTime3).forEach(System.out::println);
            System.out.println("______________________________________________________________________________");
            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime4 = new MovieSpecification();
            msDateTime4.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.EQUAL));
            movieRepository.findAll(msDateTime4).forEach(System.out::println);*/
            System.out.println("______________________________________________________________________________");

/*            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime5 = new MovieSpecification();
            msDateTime5.add(new SearchCriteria("startDate", "2021-07-27T07:12:32", "2019-07-27T07:07:32", SearchOperation.BETWEEN));
            movieRepository.findAll(msDateTime5).forEach(System.out::println);
            List<Movie> msDateTimeList = movieRepository.findAll(msDateTime5);
            msDateTimeList.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");*/

 /*           // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime7 = new MovieSpecification();
            msDateTime7.add(new SearchCriteria("startDate", "2021-07-27T07:12:32", SearchOperation.LESS_THAN_EQUAL));
            msDateTime7.add(new SearchCriteria("startDate", "2021-07-27T07:07:32", SearchOperation.GREATER_THAN_EQUAL));
            List<Movie> msDateTimeList7 = movieRepository.findAll(msDateTime7);
            msDateTimeList7.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");
*/

            // search movies by watch time >= 150 and sort by `title`
            MovieSpecification msDateTime8 = new MovieSpecification();
            msDateTime8.add(new SearchCriteria("releaseYear", 2009, SearchOperation.LESS_THAN_EQUAL));
            msDateTime8.add(new SearchCriteria("releaseYear", 2004, SearchOperation.GREATER_THAN_EQUAL));
            List<Movie> msDateTimeList8 = movieRepository.findAll(msDateTime8);
            msDateTimeList8.forEach(System.out::println);
            System.out.println("______________________________________________________________________________");



/*            System.out.println("______________________________________________________________________________");
            // search movies by title <> 'white' and paginate results
            MovieSpecification msTitle = new MovieSpecification();
            msTitle.add(new SearchCriteria("title", "white", SearchOperation.NOT_EQUAL));
            Pageable pageable = PageRequest.of(0, 3, Sort.by("releaseYear").descending());
            Page<Movie> msTitleList = movieRepository.findAll(msTitle, pageable);

            msTitleList.forEach(System.out::println);*/
        };
    }
}

---------------

public enum SearchOperation {
    GREATER_THAN,
    LESS_THAN,
    GREATER_THAN_EQUAL,
    LESS_THAN_EQUAL,
    NOT_EQUAL,
    EQUAL,
    MATCH,
    MATCH_START,
    MATCH_END,
    IN,
    NOT_IN,
    BETWEEN
}

---------------------
public class SearchCriteria {
    private String key;
    private Object value;



    private Object value2;
    private SearchOperation operation;

    public SearchCriteria() {
    }

    public SearchCriteria(String key, Object value, SearchOperation operation) {
        this.key = key;
        this.value = value;
        this.operation = operation;

    }

    public SearchCriteria(String key, Object value, Object value2,SearchOperation operation) {
        this.key = key;
        this.value = value;
        this.operation = operation;
        this.value2 = value2;
    }

    // getters and setters, equals(), toString(), ... (omitted for brevity)

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

    public SearchOperation getOperation() {
        return operation;
    }

    public Object getValue2() {
        return value2;
    }

    public void setValue2(Object value2) {
        this.value2 = value2;
    }

    public void setOperation(SearchOperation operation) {
        this.operation = operation;
    }

    @Override
    public String toString() {
        return "SearchCriteria{" +
                "key='" + key + '\'' +
                ", value=" + value +
                ", value2=" + value2 +
                ", operation=" + operation +
                '}';
    }
}

------------------------------------------------

 else if (criteria.getOperation().equals(SearchOperation.BETWEEN)) {
                predicates.add(builder.between(root.get(criteria.getKey()), criteria.getValue().toString(), criteria.getValue().toString()));
            }

https://www.callicoder.com/hibernate-spring-boot-jpa-one-to-many-mapping-example/
https://hellokoding.com/jpa-one-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/
https://hellokoding.com/mapping-jpa-hibernate-entity-and-dto-with-mapstruct/
https://hellokoding.com/jpa-and-hibernate-one-to-many-unidirectional-spring-boot/

https://medium.com/@a.adendrata/converting-dto-and-entity-c24cba9cef4  -- Time examples

https://github.com/VictoriaAmazonka/stackabuse_dto/blob/master/src/main/java/com/stackabuse/dtoexample/controller/MapController.java
https://stackabuse.com/data-transfer-object-pattern-in-java-implementation-and-mapping
https://www.youtube.com/watch?v=N3uAMuC-bxo  DTO to Entity Video good Example
https://stackabuse.com/guide-to-mapstruct-in-java-advanced-mapping-library               *************
			https://github.com/TaimoorChoudhary/mapstruct
				https://github.com/VictoriaAmazonka/stackabuse_dto
https://www.programmersought.com/article/20453502320/
https://www.amitph.com/spring-entity-to-dto/         -- Junit test Case
------------------------------------------------------------------------------------------------------------------------------------------------------


https://thorben-janssen.com/how-to-join-unrelated-entities/
https://medium.com/@techkarmo/spring-data-jpa-join-with-unrelated-entities-with-help-of-jpql-in-spring-boot-application-c358e11512bd
https://www.programmersought.com/article/7600921460/
https://www.codeproject.com/Questions/5255697/Right-approach-for-aggregating-data-from-multiple
https://roytuts.com/spring-boot-data-jpa-left-right-inner-and-cross-join-examples/

Merge Example
https://onlyfullstack.blogspot.com/2019/02/setting-up-sonar-server-locally.html
https://onlyfullstack.blogspot.com/2019/02/integrate-jacoco-plugin-with-sonar-and-maven.html  next....
https://www.onlyfullstack.com/advance-collectors-in-java-8/ ****************

https://javaconceptoftheday.com/solving-real-time-queries-using-java-8-features-employee-management-system/  ********
https://javaconceptoftheday.com/collections-and-streams-in-java/

https://asbnotebook.com/spring-data-jpa-crud-example/
https://github.com/asbnotebook/spring-boot
https://asbnotebook.com/jpa-many-to-many-example-spring-boot/
https://roytuts.com/spring-boot-data-jpa-left-right-inner-and-cross-join-examples/



   @GetMapping("/user/all")
    public List<UserDTO> getUsers() {
    	List<User> user =  userRepository.findAll();
    	List<UserDTO> userDto = new ArrayList();
    	for (User userq : user) {

    		UserDTO userDTO = new UserDTO();
    		userDTO.setEmail(userq.getEmail());
    		userDTO.setFirstName(userq.getFirstName());
    		userDTO.setLastName(userq.getLastName());
    		userDTO.setMobile(userq.getMobile());
    		userDTO.setRoles(userq.getRoles().stream().map(a -> a.getPermission()).collect(Collectors.joining(",", "", "")));

    		//    		String addressID = userq.getRoles().stream().map(a -> a.getPermission()).collect(Collectors.joining(",", "[", "]")));
    		userDto.add(userDTO);

    	}


    	/*
    	 * List<UserDTO> newList = user.stream() .map(f -> new UserDTO(f.getUserId(),
    	 * f.getFirstName() , f.getLastName(), f.getMobile(), f.getEmail(),
    	 * 
    	 * f.getRoles().stream() .map(a -> a.permission)
    	 * .collect(Collectors.joining(","))) .collect(Collectors.toList();
    	 */
    	return userDto;

    	/*If you wanna create new list, use Stream.map method:
https://stackoverflow.com/questions/38496455/modify-property-value-of-the-objects-in-list-using-java-8-streams/38497684
    		List<Fruit> newList = fruits.stream()
    		    .map(f -> new Fruit(f.getId(), f.getName() + "s", f.getCountry()))
    		    .collect(Collectors.toList())*/
    }
    
    
    import java.util.Random;

public class JavaMainTest {
public static void main(String[] args) {
	/*
	 * int leftLimit = 97; // letter 'a' int rightLimit = 122; // letter 'z' int
	 * targetStringLength = 8; Random random = new Random();
	 * 
	 * String generatedString = random.ints(leftLimit, rightLimit + 1)
	 * .limit(targetStringLength) .collect(StringBuilder::new,
	 * StringBuilder::appendCodePoint, StringBuilder::append) .toString();
	 * 
	 * System.out.println("generatedString  : " + generatedString);
	 */
    
    
    int leftLimit = 48; // numeral '0'
    int rightLimit = 122; // letter 'z'
    int targetStringLength = 8;
    Random random = new Random();

    String generatedString = random.ints(leftLimit, rightLimit + 1)
      .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))
      .limit(targetStringLength)
      .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
      .toString();

    System.out.println(generatedString);
}
}

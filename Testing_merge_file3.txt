https://www.netsurfingzone.com/hibernate/many-to-many-mapping-annotation-example-in-hibernate-jpa-using-spring-boot-and-oracle/   ********
https://dzone.com/articles/introduction-to-spring-data-jpa-part-8-many-to-man        *************
https://attacomsian.com/blog/spring-data-jpa-h2-database
		https://github.com/attacomsian/code-examples/tree/master/spring-data-jpa              **********jpa-specifications, jpa-sorting, jpa-queries, jpa-pagination

https://github.com/RameshMF/spring-boot-tutorial

https://hellokoding.com/jpa-many-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/
			Handling Circular Reference of JPA and Hibernate Entity Bidirectional Relationships with Jackson JsonIgnoreProperties
			Deleting Data with JPQL, CascadeType, and orphanRemoval
			
https://stackabuse.com/a-guide-to-jpa-with-hibernate-relationship-mapping			
https://github.com/dupirefr/stackabuse-articles-code/blob/master/jpa/pom.xml



https://github.com/LogicalSapien/spring-boot-rest-h2-sample

http://knes1.github.io/blog/2015/2015-10-19-streaming-mysql-results-using-java8-streams-and-spring-data.html



https://examples.javacodegeeks.com/spring-boot-download-csv-file-example/
http://knes1.github.io/blog/2015/2015-10-19-streaming-mysql-results-using-java8-streams-and-spring-data.html
https://www.baeldung.com/spring-app-setup-with-csv-files

https://www.baeldung.com/java-mapstruct-mapping-collections


_______________________________________________________________________________________________________________________

	public class Role 
	
	@JsonIgnore
	@ManyToMany(mappedBy="roles")
	private List<User> users;
	
	
	@Table(name = "tr_rates_view")
public class RatesInfo implements Serializable {

	private static final long serialVersionUID = 1L;

    public RatesInfo() {
		super();
	}

	@Id
    @NotNull
	@Column(name = "sl")
	private String sl;

	@Column(name = "supplier_name")
	private String dmc;

    @Null
    @Column(name = "contract_id")
    private String contract_id;

    @Null
	@Column(name = "country_name")
    private String country;



    public String getContract_id() {
		return contract_id;
	}

	public void setContract_id(String contract_id) {
		this.contract_id = contract_id;
	}


	@Null
    @Column(name = "destination")
    private String destination;

    @Null
    @Column(name = "source_market_name")
    private String source_markets;


    @Null
    @Column(name = "transfer_type")
    private String transfer_type;

    @Null
    @Column(name = "note")
    private String note;
    
    @Null
    @Column(name = "cmd_code_from")
    private String cmd_code_from;

    @Null
    @Column(name = "cmd_code_to")
    private String cmd_code_to;

    public String getNote() {
		return note;
	}


	public void setNote(String note) {
		this.note = note;
	}


	@Null
    @Column(name = "valid_from")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy")
    private Date valid_from;

    @Null
    @Column(name = "valid_to")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy")
    private Date valid_to;

    @Null
    @Column(name = "`from`")
    private String from;

    @Null
    @Column(name = "`to`")
    private String to;

    @Null
    @Column(name = "transport_method")
    private String transport_method;

	
	
	@Data
@NoArgsConstructor
@AllArgsConstructor

@Entity
@Table(name = "roles")
@JsonIdentityInfo(
        generator = ObjectIdGenerators.PropertyGenerator.class,
        property = "roleId")
public class Role  {
    @GeneratedValue(strategy = GenerationType.AUTO)
	@Id
    @Column(name = "role_id")
	private int roleId;
    
    @Column(name = "role_Name")
	private String roleName;
    private String permission;
	/*
	 * @ManyToMany(targetEntity = User.class, mappedBy = "roles", cascade =
	 * CascadeType.ALL) private List<User> users;
	 */
    
	@JsonIgnore
	@ManyToMany(mappedBy="roles")
	private List<User> users;
	
	
	
	@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users")

public class User  {
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Id
	 @Column(name = "user_id")
	private long userId;
	@Column(name = "first_name")
    private String firstName;
	@Column(name = "last_name")
    private String lastName;
    private String mobile;
    @Column(unique = true)
    private String email;;
	
	/*
	 * @ManyToMany(targetEntity = Role.class,cascade = CascadeType.ALL) private
	 * List<Role> roles;
	 */
    
	@ManyToMany(cascade=CascadeType.MERGE, fetch=FetchType.EAGER)
	@JoinTable(
	      name="users_roles",
	      joinColumns={@JoinColumn(name="USER_ID", referencedColumnName="user_id")},
	      inverseJoinColumns={@JoinColumn(name="ROLE_ID", referencedColumnName="role_id")})
	private List<Role> roles;
